{"version":3,"sources":["webpack:///./src/components/tripleTextColumn.js","webpack:///./src/pages/classLevels.js"],"names":["TripleTextColumn","props","content","title","images","Fragment","map","image","fluid","renderImages","column","documentToReactComponents","json","renderColumns","renderContent","ClassLevels","render","data","this","page","contentfulPage","classTypes","allContentfulClassType","edges","space","quote","author","tripleTextColumns","tripleTextColumn","renderTripleTextColumn","classType","node","longName","description","React","Component","pageQuery"],"mappings":"2FAAA,sEA8DeA,IAzDU,SAAAC,GAAU,IACzBC,EAA2BD,EAA3BC,QAASC,EAAkBF,EAAlBE,MAAOC,EAAWH,EAAXG,OACzB,IAAKF,EAAS,OAAO,KAkDrB,OAdsB,SAACA,EAASE,GAC/B,OACC,kBAAC,IAAMC,SAAP,KACC,kBAAC,IAAD,KACC,4BAAKF,IAEN,kBAAC,IAAD,KAxCkB,SAAAC,GACpB,OAAKA,EAIHA,EAAOE,KAAI,SAAAC,GACV,OACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAKC,MAAOD,EAAMC,YANf,KAuCJC,CAAaL,GAzBI,SAAAF,GACrB,GAAKA,EAEE,CAEN,OACCA,EAAQI,KAAI,SAAAI,GAEX,OACC,kBAAC,IAAD,KACEC,oCAA0BD,EAAOE,UARtC,OAAO,KAwBJC,CAAcX,KAOlBY,CAAcZ,EAASE,K,gNC/CnBW,E,gLACJC,OAAA,WAAU,IACAC,EAASC,KAAKjB,MAAdgB,KACFE,EAAOF,EAAKG,eACZC,EAAaJ,EAAKK,uBAAuBC,MAgB/C,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKpB,MAAM,SACX,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,4CACA,kBAAC,IAAD,CAAeqB,MAAM,SACrB,kBAAC,IAAD,CAAchB,MAAOW,EAAKZ,MAAMC,SATdW,EAAKM,MAAQ,kBAAC,IAAD,CAAOC,OAAQP,EAAKM,MAAMC,OAAQxB,QAASiB,EAAKM,MAAMvB,QAAQA,UAAa,KAZnF,WAC7B,GAAIiB,EAAKQ,kBACP,OACER,EAAKQ,kBAAkBrB,KAAI,SAAAsB,GACzB,OACE,kBAAC,IAAD,CAAkB1B,QAAS0B,EAAiB1B,QAASC,MAAOyB,EAAiBzB,WAmBhF0B,GACD,kBAAC,IAAD,KACGR,EAAWf,KAAI,SAAAwB,GACd,OACE,kBAAC,IAAD,CAAkB3B,MAAO2B,EAAUC,KAAKC,SAAU9B,QAAS4B,EAAUC,KAAKE,YAAYrB,c,GAlC5EsB,IAAMC,WA4CjBpB,YAER,IAAMqB,EAAS","file":"component---src-pages-class-levels-js-99901788b5e3770ad1a7.js","sourcesContent":["import React from \"react\"\nimport { FlexContainer, FlexItem, TripleColumnText, VerticalSpace, InnerContainer } from '../styled-components/layout'\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer'\nimport Img from \"gatsby-image\"\n\nconst TripleTextColumn = props => {\n \tconst { content, title, images } = props\n\tif (!content) return null\n\n\tconst renderImages = images => {\n\t\tif (!images ) {\n\t\t\treturn null\n\t\t} else {\n\t\t\treturn (\n\t\t\t\timages.map(image => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<FlexItem>\n\t\t\t\t\t\t\t<Img fluid={image.fluid} />\n\t\t\t\t\t\t</FlexItem>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t)\n\t\t}\n\t}\n\n\tconst renderColumns = content => {\n\t\tif (!content) {\n\t\t\treturn null\n\t\t} else {\n\t\t\tlet n = 0\n\t\t\treturn (\n\t\t\t\tcontent.map(column => {\n\t\t\t\t\tn++\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<FlexItem>\n\t\t\t\t\t\t\t{documentToReactComponents(column.json)}\n\t\t\t\t\t\t</FlexItem>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t)\n\t\t}\n\t}\n\n\tconst renderContent = (content, images) => {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<InnerContainer>\n\t\t\t\t\t<h2>{title}</h2>\n\t\t\t\t</InnerContainer>\n\t\t\t\t<FlexContainer>\n\t\t\t\t\t{renderImages(images)}\n\t\t\t\t\t{renderColumns(content)}\n\t\t\t\t</FlexContainer>\n\t\t\t</React.Fragment>\n\t\t)\n\t}\n\n\treturn (\n\t\trenderContent(content, images)\n\t)\n}\n\nexport default TripleTextColumn\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport FullWidthImg from \"../components/fullWidthImg\"\nimport { ContentContainer, VerticalSpace, InnerContainer, FlexContainer } from \"../styled-components/layout\"\nimport Quote from '../components/quote'\nimport TripleTextColumn from \"../components/tripleTextColumn\"\nimport SingleTextColumn from \"../components/singleTextColumn\"\n\n\nclass ClassLevels extends React.Component {\n  render() {\n    const { data } = this.props\n    const page = data.contentfulPage\n    const classTypes = data.allContentfulClassType.edges\n\n    const renderTripleTextColumn = () => {\n      if (page.tripleTextColumns) {\n        return (\n          page.tripleTextColumns.map(tripleTextColumn => {\n            return (\n              <TripleTextColumn content={tripleTextColumn.content} title={tripleTextColumn.title}></TripleTextColumn>\n            )\n          })\n        )\n      }\n    }\n\n    const renderQuote = () => page.quote ? <Quote author={page.quote.author} content={page.quote.content.content}/> : null\n\n    return (\n      <Layout>\n        <SEO title=\"Home\" />\n        <ContentContainer>\n          <InnerContainer>\n            <h1>Class Levels</h1>\n            <VerticalSpace space=\"30px\"/>\n            <FullWidthImg fluid={page.image.fluid} />\n          </InnerContainer>\n          {renderQuote()}\n          {renderTripleTextColumn()}\n          <FlexContainer>\n            {classTypes.map(classType => {\n              return (\n                <SingleTextColumn title={classType.node.longName} content={classType.node.description.json} />\n              )\n            })}\n          </FlexContainer>\n        </ContentContainer>\n      </Layout>\n    )\n  }\n}\n\nexport default ClassLevels\n\nexport const pageQuery = graphql`\n  query {\n    allContentfulClassType(\n      sort: {\n        fields: [order]\n        order: ASC\n      }\n    ){\n      edges {\n        node {\n          longName\n          shortName\n          description {\n            json\n          }\n        }\n      }\n    }\n    contentfulPage(contentful_id: {eq: \"2YqZrgz26PjdcOOYFP39Cu\"}){\n      title\n      image {\n        fluid {\n          ...GatsbyContentfulFluid\n        }\n      }\n      tripleTextColumns {\n        title\n      }\n      quote {\n        author\n        content {\n          content\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}